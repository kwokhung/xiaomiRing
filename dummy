import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import mpl_finance as mpf
import talib
import futu as ft

quote_ctx = ft.OpenQuoteContext(host='127.0.0.1', port=11111)
stock_code = 'HK.03188'

fig = plt.figure(figsize=(8, 6))
ax = fig.add_subplot(3, 1, 1)
ax1 = fig.add_subplot(3, 1, 2, sharex=ax)
ax2 = fig.add_subplot(3, 1, 3, sharex=ax)
fig.subplots_adjust(bottom=0.28)


def animate(i):
    ret_code, df, page_req_key = quote_ctx.request_history_kline(
        stock_code,
        start='2019-04-16',
        end='2019-04-16',
        ktype=ft.KLType.K_1M,
        autype=ft.AuType.QFQ,
        fields=[
            ft.KL_FIELD.DATE_TIME,
            ft.KL_FIELD.OPEN,
            ft.KL_FIELD.HIGH,
            ft.KL_FIELD.LOW,
            ft.KL_FIELD.CLOSE,
            ft.KL_FIELD.CHANGE_RATE,
            ft.KL_FIELD.TRADE_VOL
            # , ft.KL_FIELD. LAST_CLOSE, ft.KL_FIELD.TRADE_VAL, ft.KL_FIELD.TURNOVER_RATE
        ],
        max_count=60 * 24)

    if ret_code == ft.RET_OK:
        print('{}. {}: {}'.format(i, df['time_key'].iloc[-1], df['close'].iloc[-1]))

        df.to_csv('C:/temp/{}.csv'.format(stock_code))
    else:
        print('{}. return_code: {}'.format(i, ret_code))

        return

    sma_10 = talib.SMA(np.array(df['close']), 10)
    sma_20 = talib.SMA(np.array(df['close']), 20)
    sma_60 = talib.SMA(np.array(df['close']), 60)
    macd, signal, hist = talib.MACD(np.array(df['close']), 12, 26, 9)

    ax.clear()

    ax.set_xticks(range(0, len(df['time_key']), 30))
    ax.set_xticklabels(df['time_key'][::30], rotation=90)

    ax.plot(df['close'], label='close')
    ax.plot(sma_10, label='10 SMA')
    ax.plot(sma_20, label='20 SMA')
    ax.plot(sma_60, label='60 SMA')

    ax.legend(loc='upper left')
    ax.grid(True)

    mpf.candlestick2_ochl(
        ax,
        df['open'],
        df['close'],
        df['high'],
        df['low'],
        width=0.5,
        colorup='r',
        colordown='green',
        alpha=0.6)

    ax1.clear()

    ax1.set_xticks(range(0, len(df['time_key']), 30))
    ax1.set_xticklabels(df['time_key'][::30], rotation=90)

    ax1.plot(macd, label='DIF')
    ax1.plot(signal, label='DEA')

    ax1.legend(loc='upper left')
    ax1.grid(True)

    ax2.clear()

    ax2.set_xticks(range(0, len(df['time_key']), 30))
    ax2.set_xticklabels(df['time_key'][::30], rotation=30, horizontalalignment='right')

    mpf.volume_overlay(ax2, df['open'], df['close'], df['volume'], colorup='r', colordown='g', width=0.5, alpha=0.8)

    plt.subplots_adjust(hspace=0)
    plt.ylabel('Stock Price ({})'.format(stock_code))
    plt.xlabel('Time (Min)')


ani = animation.FuncAnimation(fig, animate, interval=3000)
plt.show()

quote_ctx.close()
